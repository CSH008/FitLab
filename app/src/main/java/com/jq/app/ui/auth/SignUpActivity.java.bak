package com.jq.app.ui.auth;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.app.LoaderManager.LoaderCallbacks;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.Toast;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONObjectRequestListener;
import com.jq.app.App;
import com.jq.app.R;
import com.jq.app.ui.MainActivity;
import com.jq.app.util.Common;
import com.jq.app.util.Config;
import com.jq.app.util.Constants;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;

import static android.Manifest.permission.READ_CONTACTS;

/**
 * A login screen that offers login via email/password.
 */
public class SignUpActivity extends BaseAuthActivity implements LoaderCallbacks<Cursor> {

    /**
     * Id to identity READ_CONTACTS permission request.
     */
    private static final int REQUEST_READ_CONTACTS = 0;

    /**
     * A dummy authentication store containing known user names and passwords.
     * TODO: remove after connecting to a real authentication system.
     */
    private static final String[] DUMMY_CREDENTIALS = new String[]{
            "foo@example.com:hello", "bar@example.com:world"
    };

    // UI references.
    private AutoCompleteTextView mEmailView;
    private AutoCompleteTextView mFullName;
    private AutoCompleteTextView mMedicalDetail;
    private AutoCompleteTextView mNumberView;
    private EditText mPasswordView;

    private View mProgressView;
    private View mLoginFormView;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_up);

        mContext = this;
        // Set up the login form.
        mFullName = (AutoCompleteTextView) findViewById(R.id.full_name);
        mMedicalDetail = (AutoCompleteTextView) findViewById(R.id.medical_details);
        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);
        mNumberView = (AutoCompleteTextView) findViewById(R.id.phone);
        mPasswordView = (EditText) findViewById(R.id.password);

        mLoginFormView = findViewById(R.id.sign_up_form);
        mProgressView = findViewById(R.id.view_progress);
    }

    private void populateAutoComplete() {
        if (!mayRequestContacts()) {
            return;
        }

        getLoaderManager().initLoader(0, null, this);
    }

    private boolean mayRequestContacts() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            return true;
        }
        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
                    .setAction(android.R.string.ok, new OnClickListener() {
                        @Override
                        @TargetApi(Build.VERSION_CODES.M)
                        public void onClick(View v) {
                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                        }
                    });
        } else {
            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
        }
        return false;
    }

    public void onClick(View view) {
        int id = view.getId();
        switch (id) {
            case R.id.email_sign_in_button:
                attemptSignUp();
                break;

            case R.id.sign_in:
                startActivity(new Intent(this, LoginActivity.class));
                finish();
                break;
        }
    }

    /**
     * Callback received when a permissions request has been completed.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        if (requestCode == REQUEST_READ_CONTACTS) {
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                populateAutoComplete();
            }
        }
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    private void attemptSignUp() {
        // Reset errors.
        mEmailView.setError(null);
        mPasswordView.setError(null);

        // Store values at the time of the login attempt.
        final String username = mFullName.getText().toString();
        final String medicalDetail = mMedicalDetail.getText().toString();
        final String email = mEmailView.getText().toString();
        final String number = mNumberView.getText().toString();
        final String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        if (TextUtils.isEmpty(username)) {
            mFullName.setError(getString(R.string.error_field_required));
            focusView = mFullName;
            cancel = true;
        }

        if (TextUtils.isEmpty(medicalDetail)) {
            mMedicalDetail.setError(getString(R.string.error_field_required));
            focusView = mMedicalDetail;
            cancel = true;
        }

        if (TextUtils.isEmpty(number)) {
            mNumberView.setError(getString(R.string.error_field_required));
            focusView = mNumberView;
            cancel = true;
        }

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(email)) {
            mEmailView.setError(getString(R.string.error_field_required));
            focusView = mEmailView;
            cancel = true;
        } else if (!isEmailValid(email)) {
            mEmailView.setError(getString(R.string.error_invalid_email));
            focusView = mEmailView;
            cancel = true;
        }

        if (cancel) {
            // There was an error; don't attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            showProgress(true);
            /*AsyncHttpClient client = new AsyncHttpClient();
            String url = Config.API_REGISTRATION + "?username=" + username + "&email=" + email + "&medical_detail=" + medicalDetail + "&mobile_user=" + number +
                    "&password=" + password + "&account_type=0";
            client.get(url, new AsyncHttpResponseHandler() {

                @Override
                public void onStart() {
                    // called before request is started
                }

                @Override
                public void onSuccess(int statusCode, Header[] headers, byte[] response) {
                    // called when response HTTP status is "200 OK"
                    String res = new String(response);
                    Log.d("SignUp", res);
                    showProgress(false);
                    try {
                        JSONObject jsonObject = new JSONObject(res);
                        int status = jsonObject.getInt("status");
                        if(status==1) {
                            Common.saveStringWithKeyValue(mContext, Constants.KEY_USER_NUMBER, number);
                            Common.saveStringWithKeyValue(mContext, Constants.KEY_USERNAME, username);
                            Common.saveStringWithKeyValue(mContext, Constants.KEY_USER_EMAIL, email);
                            Common.saveStringWithKeyValue(mContext, Constants.KEY_MEDICAL_DETAIL, medicalDetail);
                            Common.saveStringWithKeyValue(mContext, Constants.KEY_PASSWORD, password);

                            Common.saveStringWithKeyValue(SignUpActivity.this, Constants.KEY_ACTIVATED, Constants.KEY_FALSE);
                            goLogin();

                        } else {
                            Toast.makeText(SignUpActivity.this, R.string.msg_sign_up_failed, Toast.LENGTH_LONG).show();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        Toast.makeText(SignUpActivity.this, R.string.msg_sign_up_failed, Toast.LENGTH_LONG).show();
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {
                    // called when response HTTP status is "4XX" (eg. 401, 403, 404)
                    Log.d("SignUp", e.getMessage());
                    Toast.makeText(SignUpActivity.this, R.string.msg_sign_up_failed, Toast.LENGTH_LONG).show();
                }

                @Override
                public void onRetry(int retryNo) {
                    // called when request is retried

                }
            });*/

            AndroidNetworking.get(Config.API_REGISTRATION)
                    .addPathParameter("?username", username)
                    .addPathParameter("&email", email)
                    .addPathParameter("&medical_detail", medicalDetail)
                    .addPathParameter("&mobile_user", number)
                    .addPathParameter("&account_type", "0")
                    .addPathParameter("&password", password)
                    .setTag("sign up")
                    .setPriority(Priority.MEDIUM)
                    .build()
                    .getAsJSONObject(new JSONObjectRequestListener() {
                        @Override
                        public void onResponse(JSONObject response) {
                            try {
								
								 System.out.println("SignUP"+response);
                                int status = response.getInt("status");
                                if(status==1) {
                                    Common.saveStringWithKeyValue(mContext, Constants.KEY_USER_NUMBER, number);
                                    Common.saveStringWithKeyValue(mContext, Constants.KEY_USERNAME, username);
                                    Common.saveStringWithKeyValue(mContext, Constants.KEY_USER_EMAIL, email);
                                    Common.saveStringWithKeyValue(mContext, Constants.KEY_MEDICAL_DETAIL, medicalDetail);
                                    Common.saveStringWithKeyValue(mContext, Constants.KEY_PASSWORD, password);

                                    Common.saveStringWithKeyValue(SignUpActivity.this, Constants.KEY_ACTIVATED, Constants.KEY_FALSE);
                                    goLogin();

                                } else {
                                    String message = response.getString("message");
                                    if(message!=null && !message.isEmpty()) {
                                        showToast(message);
                                    } else {
                                        showToast(R.string.msg_sign_up_failed);
                                    }
                                    showProgress(false);
                                }

                            } catch (JSONException e) {
                                showToast(R.string.msg_sign_up_failed);
                                showProgress(false);
                            }
                        }

                        @Override
                        public void onError(ANError anError) {
                            showProgress(false);
                            showToast(getString(R.string.msg_sign_up_failed));
                        }
                    });
        }
    }

    public void goLogin () {
        String email = Common.getStringWithValueKey(this, Constants.KEY_USER_EMAIL);
        App.my_email = email;

        registerFirebase();
    }

    @Override
    public void succeedFirebaseAuthenticate() {
        showProgress(false);
        startActivity(new Intent(this, MainActivity.class));
        finish();
    }

    @Override
    public void failedFirebaseAuthenticate() {
        showToast("Sign Up Failed.");
        showProgress(false);
    }

    private boolean isEmailValid(String email) {
        //TODO: Replace this with your own logic
        return email.contains("@");
    }

    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logic
        return password.length() > 4;
    }

    /**
     * Shows the progress UI and hides the login form.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    private void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
            mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                }
            });

            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mProgressView.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    @Override
    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
        return new CursorLoader(this,
                // Retrieve data rows for the device user's 'profile' contact.
                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,

                // Select only email addresses.
                ContactsContract.Contacts.Data.MIMETYPE +
                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email
                .CONTENT_ITEM_TYPE},

                // Show primary email addresses first. Note that there won't be
                // a primary email address if the user hasn't specified one.
                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");
    }

    @Override
    public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {
        List<String> emails = new ArrayList<>();
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            emails.add(cursor.getString(ProfileQuery.ADDRESS));
            cursor.moveToNext();
        }

        addEmailsToAutoComplete(emails);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> cursorLoader) {

    }

    private void addEmailsToAutoComplete(List<String> emailAddressCollection) {
        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
        ArrayAdapter<String> adapter =
                new ArrayAdapter<>(SignUpActivity.this,
                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);

        mEmailView.setAdapter(adapter);
    }


    private interface ProfileQuery {
        String[] PROJECTION = {
                ContactsContract.CommonDataKinds.Email.ADDRESS,
                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
        };

        int ADDRESS = 0;
        int IS_PRIMARY = 1;
    }

}

